package de.ww.openweather.controllers;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import de.ww.openweather.controllers.param.OrtFilterParam;
import de.ww.openweather.controllers.param.PageParam;
import de.ww.openweather.controllers.param.SortParam;
import de.ww.openweather.utils.persistence.Ort;
import de.ww.openweather.utils.repositories.OrtRepository;

@RestController
@RequestMapping("/restservices")
public class OrtRestController {

	@Autowired
	private OrtRepository ortRepo;
	
	private Logger log = LogManager.getLogger(this.getClass().getName());
	
	/**
	 * http://127.0.0.1:9999/ort/all
	 * @return List mit Orten, von denen Wetterdaten abgerufen werden soll
	 */
	@RequestMapping(value="/ort/all")
	public @ResponseBody List<Ort> getListAllOrt() {
		log.debug("getWetterdatenAll (URL: /wetter/all) ...");
		List<Ort> orte = (List<Ort>) ortRepo.findAll();
		return orte;
	}

	
    /**
     * Liefert eine sortierte und gefilterte Liste von Katalogwerten mit Paging.
     * 
     * @param filter
     * @param sort
     * @param page
     * @return
     */
	@RequestMapping("/ort")
	public Page<Ort> listOrt(
		@RequestParam(required = false) OrtFilterParam filter,
		@RequestParam(defaultValue = "{}") SortParam sort,
		@RequestParam(defaultValue = "{\"index\":0,\"size\":10}") PageParam page) {	
		
		log.info("Filter: " + filter);
		log.info("Sort: " + sort);
		log.info("Page: " + page);
		
		//findAll
		// http://localhost:9999/restservices/ort?filter=%7B%7D&page=%7B7D&sort=%7B%7D

		// HTML URL Encoding: https://www.w3schools.com/TagS/ref_urlencode.asp
		// %7B = {
		// %22 = "
		// %7D =}
		// %3A = :
		// Alle Orte in ES, sortiert nach Ort, 1. Seite
		// http://localhost:9999/restservices/ort?filter={"land":"ES"}&sort={"orderBy":"ort"}&page={"index":0}
		// http://localhost:9999/restservices/ort?filter=%7B%22land%22%3A%22ES%22%7D&sort=%7B%22orderBy%22%3A%22ort%22%7D&page=%7B%22index%22%3A0%7D
		// Alle Orte in DE, sortiert nach Ort, 1. Seite
		// http://localhost:9999/restservices/ort?filter=%7B%22land%22%3A%22DE%22%7D&sort=%7B%22orderBy%22%3A%22ort%22%7D&page=%7B%22index%22%3A0%7D
		PageRequest pageRequest = new PageRequest(page.getIndex(), page.getSize(), sort.toDataSort());
		
		//Keywords gesetzt
		if (filter != null && !filter.isEmpty()) {
//			if (filter.getKatalogId() != null) {
//				//KatalogId und Keyword gesetzt
//				log.info("search(" + filter.getKatalogId() + ", " + filter.getKeyword() + ")");
//				return ortRepo.searchByKatalogIdAndKeyword(filter.getKatalogId(), filter.getKeyword(), pageRequest);
//			} else if (filter.getAnwendungId() != null) {
//				//AnwendungId und Keyword gesetzt
//				log.info("searchBySystemAndKeyword(" + filter.getAnwendungId() + ", " + filter.getKeyword() + ")");
//				return katalogwertRepository.searchByAnwendungIdAndKeyword(filter.getAnwendungId(), filter.getKeyword(),pageRequest);
//			} else {
//				//Nur Keyword gesetzt (Suche ueber die Spalten id, schluessel und bezeichnung)
//				log.info("search(" + filter.getKeyword() + ")");
//				return katalogwertRepository.search(filter.getKeyword(), pageRequest);//OK
//			}
		}
		//Keine Keywords gesetzt
		else {
			if (filter == null){
				log.info("findAll()");
//				return katalogwertRepository.findAll(pageRequest);//OK
			}
			if (filter.getLand() != null) {
				log.info("searchByLand(" + filter.getLand() + ")");
				return ortRepo.searchByLand(filter.getLand(), pageRequest);//OK
			} else if (filter.getOrt() != null) {
				log.info("searchBySOrt(" + filter.getOrt() + ")");
				return ortRepo.searchByOrt(filter.getOrt(), pageRequest);//OK
			} 
		}		
		
		//default
		log.info("findAll()");
		return ortRepo.findAll(pageRequest);//OK
	}
	
	/**
	 * http://127.0.0.1:9999/ort/byId/1
	 * @param id PK des Ores
	 * @return Ortdatensatz mit PK=1
	 */
	@RequestMapping(value="/ort/{id}")
	public @ResponseBody Ort getWetterdatenById(@PathVariable Long id) {
		log.debug("Ort-ID: " + id);
		Ort ort = ortRepo.findOne(id);
		return ort;
	}	
	
	/**
	 * Speichert einen Ort-Datensatz
	 * @param ort Ort-Objekt
	 * @return Gespeichertes Ort-Objekt
	 */
	@RequestMapping(value="/ort", method = RequestMethod.POST)
	public Ort save(@RequestBody Ort ort) {
		log.debug("save - Ort: " + ort.getOrt());
		ortRepo.save(ort);
		return ort;
	}
	
	/**
	 * L&ouml;scht einen Ort-Datensatz
	 * @param id PK des Datensatzes
	 * @return DeleteResult-Objekt welches im Attribut id den PK enth&auml;lt
	 */
	@RequestMapping(value = "/ort/{id}", method = RequestMethod.DELETE)
	public DeleteResult delete(@PathVariable Long id) {
		log.debug("delete - zu loeschende ID: " + id);
		ortRepo.delete(id);
		return new DeleteResult(id);
	} 	

}
